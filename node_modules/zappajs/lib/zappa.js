// Generated by CoffeeScript 1.10.0
(function() {
  var coffee_css, coffeescript_helpers, flatten, fs, invariate, log, methods, minify, path, seem, session, uglify, util, uuid, vendor_module, zappa,
    slice = [].slice;

  zappa = {
    version: (require('../package.json')).version
  };

  log = console.log;

  fs = require('fs');

  path = require('path');

  util = require('util');

  uuid = require('node-uuid');

  methods = require('methods');

  seem = require('seem');

  session = require('express-session');

  vendor_module = function() {
    var args, module;
    module = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
    return fs.readFileSync(path.join.apply(path, [path.dirname(require.resolve(module))].concat(slice.call(args))), 'utf-8');
  };

  uglify = null;

  coffee_css = null;

  coffeescript_helpers = require('coffeescript-helpers');

  minify = function(js) {
    var result;
    if (uglify == null) {
      uglify = require('uglify-js');
    }
    result = uglify.minify(js, {
      fromString: true
    });
    return result.code;
  };

  flatten = function(arr, ret) {
    var j, len, o;
    if (ret == null) {
      ret = [];
    }
    for (j = 0, len = arr.length; j < len; j++) {
      o = arr[j];
      if (Array.isArray(o)) {
        flatten(o, ret);
      } else {
        ret.push(o);
      }
    }
    return ret;
  };

  invariate = function(f) {
    return function() {
      var k, ref, results, v;
      if (typeof arguments[0] === 'object') {
        ref = arguments[0];
        results = [];
        for (k in ref) {
          v = ref[k];
          results.push(f.apply(this, [k, v]));
        }
        return results;
      } else {
        return f.apply(this, arguments);
      }
    };
  };

  zappa.app = function() {
    var ZappaView, a, app, apply_helpers, build_param, client, client_bundle_simple, client_bundled, context, express, fn1, func, helpers, io, j, jquery, jquery_minified, l, len, len1, options, ref, ref1, ref2, ref3, root, route, sammy, sammy_minified, socketio, socketjs, teacup, teacup_express, teacupjs, verb, views, ws_handlers, zappa_used, zappa_with;
    for (j = 0, len = arguments.length; j < len; j++) {
      a = arguments[j];
      switch (typeof a) {
        case 'function':
          func = a;
          break;
        case 'object':
          options = a;
      }
    }
    if (options == null) {
      options = {};
    }
    express = (ref = options.express) != null ? ref : require('express');
    context = {
      id: uuid.v4(),
      zappa: zappa,
      express: express,
      session: session
    };
    root = path.dirname(module.parent.filename);
    ws_handlers = {};
    helpers = {};
    app = context.app = express();
    if (options.https != null) {
      context.server = require('https').createServer(options.https, app);
    } else {
      context.server = require('http').createServer(app);
    }
    io = null;
    if (options.io !== false) {
      socketio = (ref1 = options.socketio) != null ? ref1 : require('socket.io');
      io = context.io = socketio(context.server, (ref2 = options.io) != null ? ref2 : {});
    }
    client = null;
    zappa_used = false;
    views = context.views = {};
    ZappaView = (function() {
      function ZappaView(name, options) {
        var defaultEngine, engines, name1, name2, ref3, ref4;
        if (options == null) {
          options = {};
        }
        this.root = (ref3 = options.root) != null ? ref3 : '';
        engines = options.engines;
        defaultEngine = options.defaultEngine;
        this.ext = path.extname(name);
        if (!this.ext && !defaultEngine) {
          throw new Error('No default engine was specified and no extensions was provided.');
        }
        if (!this.ext) {
          this.ext = defaultEngine[0] !== '.' ? "." + defaultEngine : defaultEngine;
          name += this.ext;
        }
        ref4 = this.lookup(name), this.path = ref4[0], this.proto = ref4[1];
        if (this.proto != null) {
          if (this.proto) {
            this.engine = engines[name1 = this.ext + " zappa"] != null ? engines[name1] : engines[name1] = require(this.ext.slice(1)).render;
          } else {
            this.engine = engines[name2 = this.ext] != null ? engines[name2] : engines[name2] = require(this.ext.slice(1)).__express;
          }
        }
        this.path;
      }

      ZappaView.prototype.lookup = function(p) {
        var exists, ref3, ref4;
        exists = function(p) {
          if (views[p] != null) {
            return [p, true];
          }
          if (fs.existsSync(p)) {
            return [p, false];
          }
          return null;
        };
        return (ref3 = (ref4 = exists(path.resolve(this.root, p))) != null ? ref4 : exists(path.join(path.dirname(p), path.basename(p, this.ext), "index." + this.ext))) != null ? ref3 : [null, null];
      };

      ZappaView.prototype.render = function(options, fn) {
        var e, error, error1, r;
        if (this.proto) {
          e = null;
          try {
            r = this.engine(views[this.path], options, this.path);
          } catch (error1) {
            error = error1;
            e = "Engine .render for " + this.ext + " failed: " + error;
          }
          return fn(e, r);
        } else {
          return this.engine(this.path, options, fn);
        }
      };

      return ZappaView;

    })();
    app.set('view', ZappaView);
    app.set('view engine', 'coffee');
    teacup = require('teacup');
    teacup_express = require('teacup/lib/express');
    app.engine('coffee', teacup_express.renderFile);
    app.engine('coffee zappa', function(template, options) {
      return (teacup.renderable(template)).call(options, options);
    });
    context.teacup = teacup;
    context.seem = seem;
    app.set('views', path.join(root, '/views'));
    app.set('zappa_prefix', '/zappa');
    ref3 = slice.call(methods).concat(['all']);
    fn1 = function(verb) {
      return context[verb] = function() {
        var args, arity, k, ref4, v;
        args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
        arity = args.length;
        if (arity > 1) {
          route({
            verb: verb,
            path: args[0],
            middleware: flatten(args.slice(1, arity - 1)),
            handler: args[arity - 1]
          });
        } else {
          ref4 = arguments[0];
          for (k in ref4) {
            v = ref4[k];
            if (v instanceof Array) {
              route({
                verb: verb,
                path: k,
                middleware: flatten(v.slice(0, v.length - 1)),
                handler: v[v.length - 1]
              });
            } else {
              route({
                verb: verb,
                path: k,
                handler: v
              });
            }
          }
        }
      };
    };
    for (l = 0, len1 = ref3.length; l < len1; l++) {
      verb = ref3[l];
      fn1(verb);
    }
    context.client = invariate(function(k, v) {
      var js;
      if (!zappa_used) {
        context.use('zappa');
      }
      js = ";zappa.run(" + v + ");";
      if (app.settings['minify']) {
        js = minify(js);
      }
      route({
        verb: 'get',
        path: k,
        handler: js,
        type: 'js'
      });
    });
    context.coffee = invariate(function(k, v) {
      var js;
      js = coffeescript_helpers.p_fun(v);
      if (app.settings['minify']) {
        js = minify(js);
      }
      route({
        verb: 'get',
        path: k,
        handler: js,
        type: 'js'
      });
    });
    context.js = invariate(function(k, v) {
      var js;
      js = String(v);
      if (app.settings['minify']) {
        js = minify(js);
      }
      route({
        verb: 'get',
        path: k,
        handler: js,
        type: 'js'
      });
    });
    context.css = invariate(function(k, v) {
      var css;
      if (typeof v === 'object') {
        if (coffee_css == null) {
          coffee_css = require('coffee-css');
        }
        css = coffee_css.compile(v);
      } else {
        css = String(v);
      }
      route({
        verb: 'get',
        path: k,
        handler: css,
        type: 'css'
      });
    });
    zappa_with = {
      css: function(modules) {
        var len2, m, module, name;
        if (typeof modules === 'string') {
          modules = [modules];
        }
        for (m = 0, len2 = modules.length; m < len2; m++) {
          name = modules[m];
          module = require(name);
          context[name] = invariate(function(k, v) {
            module.render(v, {
              filename: k
            }, function(err, css) {
              if (err) {
                throw err;
              }
              if ((css.css != null) && typeof css.css === 'string') {
                css = css.css;
              }
              return route({
                verb: 'get',
                path: k,
                handler: css,
                type: 'css'
              });
            });
          });
        }
      }
    };
    context["with"] = invariate(function(k, v) {
      if (zappa_with[k]) {
        return zappa_with[k](v);
      }
    });
    context.helper = invariate(function(k, v) {
      helpers[k] = v;
    });
    context.on = invariate(function(k, v) {
      ws_handlers[k] = v;
    });
    context.view = invariate(function(k, v) {
      var ext, p;
      ext = path.extname(k);
      p = path.join(app.get('views'), k);
      if (!ext) {
        p += '.' + app.get('view engine');
      }
      views[p] = v;
    });
    context.engine = invariate(function(k, v) {
      app.engine(k, v);
    });
    context.set = invariate(function(k, v) {
      app.set(k, v);
    });
    context.enable = function() {
      var i, len2, m;
      for (m = 0, len2 = arguments.length; m < len2; m++) {
        i = arguments[m];
        app.enable(i);
      }
    };
    context.disable = function() {
      var i, len2, m;
      for (m = 0, len2 = arguments.length; m < len2; m++) {
        i = arguments[m];
        app.disable(i);
      }
    };
    context.wrap = function(f) {
      return function(req, res, next) {
        var ctx;
        ctx = {
          app: app,
          settings: app.settings,
          locals: res.locals,
          request: req,
          req: req,
          query: req.query,
          params: req.params,
          body: req.body,
          session: req.session,
          response: res,
          res: res,
          next: next,
          send: function() {
            return res.send.apply(res, arguments);
          },
          json: function() {
            return res.json.apply(res, arguments);
          },
          jsonp: function() {
            return res.jsonp.apply(res, arguments);
          },
          redirect: function() {
            return res.redirect.apply(res, arguments);
          },
          format: function() {
            return res.format.apply(res, arguments);
          }
        };
        apply_helpers(ctx);
        return f.call(ctx, req, res, next);
      };
    };
    context.use = function() {
      var k, len2, m, use, v, zappa_middleware;
      zappa_middleware = {
        "static": function(options) {
          var p, ref4;
          if (typeof options === 'string') {
            options = {
              path: options
            };
          }
          if (options == null) {
            options = {};
          }
          p = (ref4 = options.path) != null ? ref4 : path.join(root, '/public');
          delete options.path;
          return express["static"](p, options);
        },
        zappa: function() {
          zappa_used = true;
          return function(req, res, next) {
            var send, zappa_prefix;
            send = function(code) {
              res.type('js');
              return res.send(code);
            };
            if (req.method.toUpperCase() !== 'GET') {
              next();
            } else {
              zappa_prefix = app.settings.zappa_prefix;
              switch (req.url) {
                case zappa_prefix + '/full.js':
                  send(client_bundled());
                  break;
                case zappa_prefix + '/simple.js':
                  send(client_bundle_simple());
                  break;
                case zappa_prefix + '/zappa.js':
                  send(client);
                  break;
                case zappa_prefix + '/jquery.js':
                  send(jquery_minified());
                  break;
                case zappa_prefix + '/sammy.js':
                  send(sammy_minified());
                  break;
                case zappa_prefix + '/socket.io.js':
                  send(socketjs());
                  break;
                case zappa_prefix + '/teacup.js':
                  send(teacupjs());
                  break;
                default:
                  next();
              }
            }
          };
        },
        session: function(options) {
          context.session_store = options.store;
          return session(options);
        }
      };
      use = function(name, arg) {
        if (arg == null) {
          arg = null;
        }
        if (zappa_middleware[name]) {
          return app.use(zappa_middleware[name](arg));
        } else if (typeof express[name] === 'function') {
          return app.use(express[name](arg));
        } else {
          return app.use((require(name))(arg));
        }
      };
      for (m = 0, len2 = arguments.length; m < len2; m++) {
        a = arguments[m];
        switch (typeof a) {
          case 'function':
            app.use(a);
            break;
          case 'string':
            use(a);
            break;
          case 'object':
            if ((a.stack != null) || (a.route != null) || (a.handle != null)) {
              app.use(a);
            } else {
              for (k in a) {
                v = a[k];
                use(k, v);
              }
            }
        }
      }
    };
    context.settings = app.settings;
    context.locals = app.locals;
    context.shared = invariate(function(k, v) {
      var js;
      if (!zappa_used) {
        context.use('zappa');
      }
      js = ";zappa.run(" + v + ");";
      if (app.settings['minify']) {
        js = minify(js);
      }
      route({
        verb: 'get',
        path: k,
        handler: js,
        type: 'js'
      });
      v.apply(context);
    });
    context.include = function() {
      var args, p, sub;
      p = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      sub = typeof p === 'string' ? require(path.join(root, p)) : p;
      return sub.include.apply(context, args);
    };
    apply_helpers = function(ctx) {
      var fn2, helper, name;
      fn2 = function(name, helper) {
        if (typeof helper === 'function') {
          ctx[name] = function() {
            return helper.apply(ctx, arguments);
          };
        } else {
          ctx[name] = helper;
        }
      };
      for (name in helpers) {
        helper = helpers[name];
        fn2(name, helper);
      }
      return ctx;
    };
    build_param = function(callback) {
      return function(req, res, next, p) {
        var ctx;
        ctx = {
          app: app,
          settings: app.settings,
          locals: res.locals,
          request: req,
          req: req,
          query: req.query,
          params: req.params,
          body: req.body,
          session: req.session,
          response: res,
          res: res,
          next: next,
          param: p
        };
        apply_helpers(ctx);
        return callback.call(ctx, req, res, next, p);
      };
    };
    context.param = invariate(function(k, v) {
      this.app.param(k, build_param(v));
    });
    route = function(r) {
      if (r.middleware == null) {
        r.middleware = [];
      }
      if (typeof r.handler === 'string') {
        return app[r.verb](r.path, r.middleware, function(req, res) {
          if (r.type != null) {
            res.type(r.type);
          }
          res.send(r.handler);
        });
      } else if (r.handler.call != null) {
        return app[r.verb](r.path, r.middleware, function(req, res, next) {
          var ctx, render, result;
          ctx = {
            app: app,
            settings: app.settings,
            locals: res.locals,
            request: req,
            req: req,
            query: req.query,
            params: req.params,
            body: req.body,
            session: req.session,
            response: res,
            res: res,
            next: next,
            send: function() {
              return res.send.apply(res, arguments);
            },
            json: function() {
              return res.json.apply(res, arguments);
            },
            jsonp: function() {
              return res.jsonp.apply(res, arguments);
            },
            redirect: function() {
              return res.redirect.apply(res, arguments);
            },
            format: function() {
              return res.format.apply(res, arguments);
            },
            render: function() {
              var k, ref4, v;
              if (typeof arguments[0] !== 'object') {
                render.apply(this, arguments);
              } else {
                ref4 = arguments[0];
                for (k in ref4) {
                  v = ref4[k];
                  render.apply(this, [k, v]);
                }
              }
            },
            emit: invariate(function(k, v) {
              var ref4, ref5, ref6, room, socket_id;
              socket_id = (ref4 = req.session) != null ? (ref5 = ref4.__socket) != null ? (ref6 = ref5[app.settings.zappa_channel]) != null ? ref6.id : void 0 : void 0 : void 0;
              if (socket_id != null) {
                room = io.sockets["in"](socket_id);
                room.emit.apply(room, [k, v]);
              }
            })
          };
          render = function(name, opts, fn) {
            var report;
            if (opts == null) {
              opts = {};
            }
            report = fn != null ? fn : function(err, html) {
              if (err) {
                return next(err);
              } else {
                return res.send(html);
              }
            };
            if (typeof opts === 'function') {
              fn = opts;
              opts = {};
            }
            return res.render.call(res, name, opts, report);
          };
          apply_helpers(ctx);
          if (app.settings['x-powered-by']) {
            res.setHeader('X-Powered-By', "Zappa " + zappa.version);
          }
          result = r.handler.call(ctx, req, res, next);
          if (typeof (result != null ? result.then : void 0) === 'function') {
            result.then(function(result) {
              if (r.type != null) {
                res.type(r.type);
              }
              if (typeof result === 'string') {
                return res.send(result);
              } else {
                return result;
              }
            }, next);
            return;
          }
          if (r.type != null) {
            res.type(r.type);
          }
          if (typeof result === 'string') {
            return res.send(result);
          } else {
            return result;
          }
        });
      } else {
        throw new Error("ZappaJS invalid handler of type " + (typeof r.handler) + ": " + (util.inspect(r.handler)));
      }
    };
    app.set('zappa_channel', '__local');
    if (io != null) {
      io.sockets.on('connection', function(socket) {
        var build_ctx, c, ctx, fn2, get_session, h, name, session_id;
        c = {};
        session_id = null;
        build_ctx = function() {
          var ctx;
          ctx = {
            app: app,
            io: io,
            settings: app.settings,
            locals: app.locals,
            socket: socket,
            id: socket.id,
            client: c,
            join: function(room) {
              return socket.join(room);
            },
            leave: function(room) {
              return socket.leave(room);
            },
            emit: invariate(function(k, v) {
              socket.emit.apply(socket, [k, v]);
            }),
            broadcast: invariate(function(k, v) {
              var broadcast;
              broadcast = socket.broadcast;
              broadcast.emit.apply(broadcast, [k, v]);
            }),
            broadcast_to: function() {
              var args, broadcast, room;
              room = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
              room = io.sockets["in"](room);
              broadcast = invariate(function(k, v) {
                return room.emit.apply(room, [k, v]);
              });
              broadcast.apply(null, args);
            }
          };
          apply_helpers(ctx);
          return ctx;
        };
        ctx = build_ctx();
        if (ws_handlers.connection != null) {
          ws_handlers.connection.apply(ctx);
        }
        socket.on('disconnect', function() {
          ctx = build_ctx();
          if (ws_handlers.disconnect != null) {
            return ws_handlers.disconnect.apply(ctx);
          }
        });
        socket.on('__zappa_key', function(data, ack) {
          if (ack == null) {
            return;
          }
          if (context.session_store == null) {
            ack({
              error: 'Missing session-store.'
            });
          }
          if (data.key == null) {
            ack({
              error: 'Missing key.'
            });
            return;
          }
          return context.session_store.get(data.key, function(err, data) {
            if (err != null) {
              ack({
                error: err
              });
              return;
            }
            if (data == null) {
              ack({
                error: 'Missing data'
              });
              return;
            }
            session_id = data.id;
            return ack(true);
          });
        });
        get_session = function(next) {
          if (!((context.session_store != null) && (session_id != null))) {
            next(null);
            return;
          }
          return context.session_store.get(session_id, function(error, data) {
            if (error) {
              next(null);
              return;
            }
            return next(data);
          });
        };
        fn2 = function(name, h) {
          if (name !== 'connection' && name !== 'disconnect') {
            socket.on(name, function(data, ack) {
              ctx = build_ctx();
              ctx.event = name;
              ctx.data = data;
              ctx.ack = ack;
              return get_session(function(session) {
                ctx.session = session;
                return h.call(ctx, data, ack);
              });
            });
          }
        };
        for (name in ws_handlers) {
          h = ws_handlers[name];
          fn2(name, h);
        }
      });
    }
    func.apply(context);
    jquery = function() {
      var ref4;
      return jquery.content != null ? jquery.content : jquery.content = (ref4 = app.settings.jquery_js) != null ? ref4 : vendor_module('jquery', 'jquery.js');
    };
    jquery_minified = function() {
      var ref4;
      return jquery_minified.content != null ? jquery_minified.content : jquery_minified.content = (ref4 = app.settings.jquery_min_js) != null ? ref4 : vendor_module('jquery', 'jquery.min.js');
    };
    sammy = function() {
      var ref4;
      return sammy.content != null ? sammy.content : sammy.content = (ref4 = app.settings.sammy_js) != null ? ref4 : vendor_module('sammy', 'sammy.js');
    };
    sammy_minified = function() {
      var ref4;
      return sammy_minified.content != null ? sammy_minified.content : sammy_minified.content = (ref4 = app.settings.sammy_min_js) != null ? ref4 : vendor_module('sammy', 'min', 'sammy-latest.min.js');
    };
    socketjs = function() {
      var ref4;
      return socketjs.content != null ? socketjs.content : socketjs.content = (ref4 = app.settings.socketio_js) != null ? ref4 : vendor_module('socket.io-client', 'socket.io.js');
    };
    teacupjs = function() {
      var ref4;
      return teacupjs.content != null ? teacupjs.content : teacupjs.content = (ref4 = app.settings.teacup_js) != null ? ref4 : vendor_module('teacup', 'teacup.js');
    };
    client = require('./client').build(zappa.version, app.settings);
    client = coffeescript_helpers.p_fun(client);
    client = "(function(){var f = " + client + " return f.call(this);}).call(this);";
    client_bundle_simple = function() {
      return client_bundle_simple.content != null ? client_bundle_simple.content : client_bundle_simple.content = io != null ? jquery() + socketjs() + client : jquery() + client;
    };
    client_bundled = function() {
      return client_bundled.content != null ? client_bundled.content : client_bundled.content = io != null ? jquery() + socketjs() + sammy() + client : jquery() + sammy() + client;
    };
    if (app.settings['minify']) {
      client = minify(client);
      client_bundle_simple.content = minify(client_bundle_simple());
      client_bundled.content = minify(client_bundled());
      socketjs.content = minify(socketjs());
    }
    (function() {
      var zappa_prefix;
      zappa_prefix = app.settings.zappa_prefix;
      return context.get(zappa_prefix + '/socket/:channel_name/:socket_id', function() {
        var base, channel_name, data, key, socket_id;
        if (context.session_store == null) {
          this.res.status(500);
          this.json({
            error: 'No session-store.'
          });
          return;
        }
        if (this.session == null) {
          this.res.status(400);
          this.json({
            error: 'No session'
          });
          return;
        }
        channel_name = this.params.channel_name;
        socket_id = this.params.socket_id;
        if ((base = this.session).__socket == null) {
          base.__socket = {};
        }
        if (this.session.__socket[channel_name] != null) {
          this.json({
            channel_name: channel_name,
            key: this.session.__socket[channel_name].key
          });
        } else {
          key = uuid.v4();
          data = {
            id: this.session.id,
            cookie: {}
          };
          context.session_store.set(key, data, (function(_this) {
            return function(err) {
              if (err) {
                _this.json({
                  error: err.toString()
                });
                return;
              }
              _this.session.__socket[channel_name] = {
                id: socket_id,
                key: key
              };
              return _this.json({
                channel_name: channel_name,
                key: key
              });
            };
          })(this));
        }
      });
    })();
    return context;
  };

  zappa.run = function() {
    var a, app, host, j, k, len, options, port, root_function, server, v, zapp;
    host = null;
    port = 3000;
    root_function = null;
    options = {};
    for (j = 0, len = arguments.length; j < len; j++) {
      a = arguments[j];
      switch (typeof a) {
        case 'string':
          if (isNaN(Number(a))) {
            host = a;
          } else {
            port = Number(a);
          }
          break;
        case 'number':
          port = a;
          break;
        case 'function':
          root_function = a;
          break;
        case 'object':
          for (k in a) {
            v = a[k];
            switch (k) {
              case 'host':
                host = v;
                break;
              case 'port':
                port = v;
                break;
              default:
                options[k] = v;
            }
          }
      }
    }
    zapp = zappa.app(root_function, options);
    server = zapp.server, app = zapp.app;
    if (!app.settings.silent_zappa) {
      server.on('listening', function() {
        var addr;
        addr = server.address();
        if (!app.settings.silent_zappa) {
          return log("Express server listening on " + addr.address + ":" + addr.port + " in " + app.settings.env + " mode.\nZappa " + zappa.version + " orchestrating the show.\n");
        }
      });
    }
    if (host) {
      server.listen(port, host);
    } else {
      server.listen(port);
    }
    return zapp;
  };

  module.exports = zappa.run;

  module.exports.run = zappa.run;

  module.exports.app = zappa.app;

  module.exports.version = zappa.version;

}).call(this);

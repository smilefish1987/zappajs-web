// Generated by CoffeeScript 1.10.0
(function() {
  var skeleton;

  skeleton = function() {
    var invariate, settings, zappa;
    zappa = window.zappa = {};
    zappa.version = null;
    settings = null;
    invariate = function(f) {
      return function() {
        var k, ref, results, v;
        if (typeof arguments[0] === 'object') {
          ref = arguments[0];
          results = [];
          for (k in ref) {
            v = ref[k];
            results.push(f.apply(this, [k, v]));
          }
          return results;
        } else {
          return f.apply(this, arguments);
        }
      };
    };
    return zappa.run = function(func) {
      var app, apply_helpers, context, helpers, route;
      context = {};
      context.settings = settings;
      helpers = {};
      apply_helpers = function(ctx) {
        var fn, helper, name;
        fn = function(name, helper) {
          if (typeof helper === 'function') {
            return ctx[name] = function() {
              return helper.apply(ctx, arguments);
            };
          } else {
            return ctx[name] = helper;
          }
        };
        for (name in helpers) {
          helper = helpers[name];
          fn(name, helper);
        }
        return ctx;
      };
      if (typeof Sammy !== "undefined" && Sammy !== null) {
        app = context.app = Sammy();
      }
      context.get = invariate(function(k, v) {
        return route({
          path: k,
          handler: v
        });
      });
      context.helper = invariate(function(k, v) {
        return helpers[k] = v;
      });
      context.on = invariate(function(message, action) {
        return context.socket.on(message, function(data) {
          var ctx;
          ctx = {
            app: app,
            socket: context.socket,
            id: context.socket.id,
            data: data,
            emit: context.emit,
            share: context.share
          };
          apply_helpers(ctx);
          return action.call(ctx, data);
        });
      });
      context.connect = function() {
        if (typeof io === "undefined" || io === null) {
          return;
        }
        return context.socket = io.apply(io, arguments);
      };
      context.emit = invariate(function(message, data) {
        return context.socket.emit.apply(context.socket, [message, data]);
      });
      context.share = function(channel_name, socket, next) {
        var ref, socket_id, zappa_prefix;
        zappa_prefix = (ref = settings.zappa_prefix) != null ? ref : "";
        socket_id = socket.id;
        if (socket_id == null) {
          if (typeof next === "function") {
            next(false);
          }
          return;
        }
        return $.getJSON(zappa_prefix + "/socket/" + channel_name + "/" + socket_id).done(function(arg) {
          var key;
          key = arg.key;
          if (key != null) {
            return socket.emit('__zappa_key', {
              key: key
            }, next);
          } else {
            return typeof next === "function" ? next(false) : void 0;
          }
        }).fail(function() {
          return typeof next === "function" ? next(false) : void 0;
        });
      };
      route = function(r) {
        var ctx;
        ctx = {
          app: app
        };
        apply_helpers(ctx);
        return app.get(r.path, function(sammy_context) {
          ctx.params = sammy_context.params;
          ctx.sammy_context = sammy_context;
          ctx.render = function() {
            return sammy_context.render.apply(sammy_context, arguments);
          };
          ctx.redirect = function() {
            return sammy_context.redirect.apply(sammy_context, arguments);
          };
          return r.handler.apply(ctx);
        });
      };
      func.apply(context, [context]);
      if (context.socket != null) {
        context.socket.on('connect', function() {
          return context.share(settings.zappa_channel, context.socket);
        });
      }
      if (app != null) {
        return $(function() {
          return app.run('#/');
        });
      }
    };
  };

  this.build = function(version, settings) {
    return String(skeleton).replace('version = null;', "version = '" + version + "';").replace('settings = null;', "settings = " + (JSON.stringify(settings)) + ";");
  };

}).call(this);
